<?xml version="1.0" encoding="utf-8"?>
<ScintillaNET>
	<Language Name="cpp">
		<AutoComplete FillUpCharacters=".([" SingleLineAccept="True" IsCaseSensitive="False">
			<List>
				abstract as base break case catch checked continue default delegate do else event explicit extern
				false finally fixed for foreach goto if implicit in interface internal is lock namespace new null
				object operator out override params private protected public readonly ref return sealed sizeof
				stackalloc switch this throw true try typeof unchecked unsafe using virtual while bool byte char
				class const decimal double enum float int long sbyte short static string struct uint ulong ushort void
			</List>
		</AutoComplete>

		<Indentation TabWidth="4" SmartIndentType="cpp" />


		<Lexer LexerName="cpp" LineCommentPrefix="//" StreamCommentPrefix="/* " StreamCommentSuffix=" /*" >
			<Keywords List="0" Inherit="False">
				and and_eq asm auto bitand bitor bool break
				case catch char class compl const const_cast continue
				default delete do double dynamic_cast else enum explicit export extern false float for
				friend goto if inline int long mutable namespace new not not_eq
				operator or or_eq private protected public
				register reinterpret_cast return short signed sizeof static static_cast struct switch
				template this throw true try typedef typeid typename union unsigned using
				virtual void volatile wchar_t while xor xor_eq
			</Keywords>
			<Keywords List="1" Inherit="False">
				bool byte char class const  double enum float int long 
				short static string struct uint ulong ushort void
			</Keywords>
		</Lexer>

		<Snippets>

			<Snippet Shortcut="if" IsSurroundsWith="true" longName="If statement" category="Control Flow">
				if ($end$)
				{
				$DropMarker$$selected$
				}
			</Snippet>

			<Snippet Shortcut="lb" IsSurroundsWith="true" longName="Else clause" category="Control Flow">
				else
				{
				$anchor$$selected$$caret$
				}
			</Snippet>

			<Snippet Shortcut="switch" IsSurroundsWith="false" longName ="Switch statement" category="Control Flow">
				switch ($expression$)
				{
				$cases$
				}$end$
			</Snippet>

			<Snippet Shortcut="f" longName="For loop" IsSurroundsWith="True" iconName="for.png" category="Control Flow">
				for (int $i$ = $0$; $i$ &lt; $max$; $i$++)
				{
				$selected$$end$
				}$DropMarker$
			</Snippet>

			<Snippet Shortcut="w" IsSurroundsWith="true" longName="While loop" iconName="while.png" category="Control Flow">
				while ($expression$)
				{
				$end$$selected$
				}
			</Snippet>

			<Snippet Shortcut="do" longName="Do-while loop" IsSurroundsWith="true" category="Control Flow">
				do
				{
				$end$$selected$
				} while ($expression$);
				$DropMarker$
			</Snippet>

			<Snippet Shortcut="namespace" longName="Namespace" IsSurroundsWith="true" category="Other">
				namespace $name$
				{
				$end$$selected$
				}
			</Snippet>

			<Snippet Shortcut="struct" longName="Struct" IsSurroundsWith="true" category="Other">
				struct $name$
				{
				$selected$$end$
				}
			</Snippet>			

			<Snippet Shortcut="enum" IsSurroundsWith="false" longName="Enumeration" category="Other">
				enum $name$
				{
				$end$
				}
			</Snippet>			

			<Snippet Shortcut="~" longName="Finalizer" category="Other">
				~$classname$()
				{
				$end$
				}
			</Snippet>

			<Snippet Shortcut="simpleTemplate" longName="Simple C++ Template" category="Templates">
			#include &lt;iostream&gt;
			#include &lt;string&gt;

			using namespace std;

			int main()
			{
	
				return 0;
			}
			</Snippet>


		</Snippets>
	</Language>
</ScintillaNET>
