#ifndef INC_STDCTokenTypes_hpp_
#define INC_STDCTokenTypes_hpp_

/* $ANTLR 2.7.7 (20060906): "CPP_parser.g" -> "STDCTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API STDCTokenTypes {
#endif
	enum {
		EOF_ = 1,
		LITERAL_template = 4,
		LESSTHAN = 5,
		GREATERTHAN = 6,
		LITERAL_typedef = 7,
		LITERAL_enum = 8,
		SEMICOLON = 9,
		ID = 10,
		LCURLY = 11,
		LITERAL_inline = 12,
		LITERAL_extern = 13,
		LITERAL_namespace = 14,
		LITERAL_antlrTrace_on = 15,
		LITERAL_antlrTrace_off = 16,
		RCURLY = 17,
		ASSIGNEQUAL = 18,
		COLON = 19,
		OCTALINT = 20,
		LITERAL_friend = 21,
		StringLiteral = 22,
		LITERAL_struct = 23,
		LITERAL_union = 24,
		LITERAL_class = 25,
		LITERAL__declspec = 26,
		LITERAL___declspec = 27,
		LPAREN = 28,
		RPAREN = 29,
		LITERAL_auto = 30,
		LITERAL_register = 31,
		LITERAL_static = 32,
		LITERAL_mutable = 33,
		LITERAL__inline = 34,
		LITERAL___inline = 35,
		LITERAL_virtual = 36,
		LITERAL_explicit = 37,
		LITERAL_typename = 38,
		LITERAL_char = 39,
		LITERAL_wchar_t = 40,
		LITERAL_bool = 41,
		LITERAL_short = 42,
		LITERAL_int = 43,
		// "_int8" = 44
		// "__int8" = 45
		// "_int16" = 46
		// "__int16" = 47
		// "_int32" = 48
		// "__int32" = 49
		// "_int64" = 50
		// "__int64" = 51
		// "_w64" = 52
		// "__w64" = 53
		LITERAL_long = 54,
		LITERAL_signed = 55,
		LITERAL_unsigned = 56,
		LITERAL_float = 57,
		LITERAL_double = 58,
		LITERAL_void = 59,
		LITERAL_const = 60,
		LITERAL_volatile = 61,
		COMMA = 62,
		LITERAL_public = 63,
		LITERAL_protected = 64,
		LITERAL_private = 65,
		OPERATOR = 66,
		TILDE = 67,
		LITERAL_typeid = 68,
		LSQUARE = 69,
		RSQUARE = 70,
		STAR = 71,
		AMPERSAND = 72,
		ELLIPSIS = 73,
		LITERAL_throw = 74,
		LITERAL_using = 75,
		LITERAL_case = 76,
		LITERAL_default = 77,
		LITERAL_if = 78,
		LITERAL_else = 79,
		LITERAL_switch = 80,
		LITERAL_while = 81,
		LITERAL_do = 82,
		LITERAL_for = 83,
		LITERAL_goto = 84,
		LITERAL_continue = 85,
		LITERAL_break = 86,
		LITERAL_return = 87,
		LITERAL___try = 88,
		LITERAL___except = 89,
		LITERAL___finally = 90,
		LITERAL_try = 91,
		LITERAL_catch = 92,
		TIMESEQUAL = 93,
		DIVIDEEQUAL = 94,
		MINUSEQUAL = 95,
		PLUSEQUAL = 96,
		MODEQUAL = 97,
		SHIFTLEFTEQUAL = 98,
		SHIFTRIGHTEQUAL = 99,
		BITWISEANDEQUAL = 100,
		BITWISEXOREQUAL = 101,
		BITWISEOREQUAL = 102,
		QUESTIONMARK = 103,
		OR = 104,
		AND = 105,
		BITWISEOR = 106,
		BITWISEXOR = 107,
		NOTEQUAL = 108,
		EQUAL = 109,
		LESSTHANOREQUALTO = 110,
		GREATERTHANOREQUALTO = 111,
		SHIFTLEFT = 112,
		SHIFTRIGHT = 113,
		PLUS = 114,
		MINUS = 115,
		DIVIDE = 116,
		MOD = 117,
		DOTMBR = 118,
		POINTERTOMBR = 119,
		PLUSPLUS = 120,
		MINUSMINUS = 121,
		LITERAL_sizeof = 122,
		LITERAL___alignof__ = 123,
		SCOPE = 124,
		LITERAL_dynamic_cast = 125,
		LITERAL_static_cast = 126,
		LITERAL_reinterpret_cast = 127,
		LITERAL_const_cast = 128,
		DOT = 129,
		POINTERTO = 130,
		LITERAL_this = 131,
		DECIMALINT = 132,
		HEXADECIMALINT = 133,
		CharLiteral = 134,
		WCharLiteral = 135,
		WStringLiteral = 136,
		FLOATONE = 137,
		FLOATTWO = 138,
		LITERAL_true = 139,
		LITERAL_false = 140,
		NOT = 141,
		LITERAL_new = 142,
		LITERAL__cdecl = 143,
		LITERAL___cdecl = 144,
		LITERAL__near = 145,
		LITERAL___near = 146,
		LITERAL__far = 147,
		LITERAL___far = 148,
		LITERAL___interrupt = 149,
		LITERAL_pascal = 150,
		LITERAL__pascal = 151,
		LITERAL___pascal = 152,
		LITERAL__stdcall = 153,
		LITERAL___stdcall = 154,
		LITERAL_delete = 155,
		MY = 156,
		MYFUNCTION = 157,
		MYPARAM = 158,
		MYDECLAR = 159,
		MYEXPRESSION = 160,
		MYBODY = 161,
		MYSTATEMENT = 162,
		MYCLASS = 163,
		MYTEMPLATE = 164,
		MYNAMESPACE = 165,
		MYTYPEDEF = 166,
		MYENUM = 167,
		MYTYPE = 168,
		MYCALL = 169,
		MYNEW = 170,
		Whitespace = 171,
		Comment = 172,
		CPPComment = 173,
		PREPROC_DIRECTIVE = 174,
		LineDirective = 175,
		Space = 176,
		Pragma = 177,
		Error = 178,
		EndOfContinuedLine = 179,
		EndOfLine = 180,
		Escape = 181,
		Digit = 182,
		Decimal = 183,
		LongSuffix = 184,
		UnsignedSuffix = 185,
		FloatSuffix = 186,
		Exponent = 187,
		UniversalCharacterName = 188,
		HexQuad = 189,
		HexadecimalDigit = 190,
		Vocabulary = 191,
		Number = 192,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_STDCTokenTypes_hpp_*/
