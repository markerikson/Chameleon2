#define yy_create_buffer cl_expr__create_buffer
#define yy_delete_buffer cl_expr__delete_buffer
#define yy_scan_buffer cl_expr__scan_buffer
#define yy_scan_string cl_expr__scan_string
#define yy_scan_bytes cl_expr__scan_bytes
#define yy_flex_debug cl_expr__flex_debug
#define yy_init_buffer cl_expr__init_buffer
#define yy_flush_buffer cl_expr__flush_buffer
#define yy_load_buffer_state cl_expr__load_buffer_state
#define yy_switch_to_buffer cl_expr__switch_to_buffer
#define yyin cl_expr_in
#define yyleng cl_expr_leng
#define yylex cl_expr_lex
#define yyout cl_expr_out
#define yyrestart cl_expr_restart
#define yytext cl_expr_text
#define yylineno cl_expr_lineno
#define yywrap cl_expr_wrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include "unistd.h"

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384*8

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
static yyconst short int yy_acclist[599] =
    {   0,
      143,  129,  142,    3,  129,  142,    5,  142,    4,  129,
      142,   93,  129,  142,  129,  142,   95,  129,  142,   88,
      129,  142,  129,  142,   79,  129,  142,   80,  129,  142,
       89,  129,  142,   90,  129,  142,   81,  129,  142,   91,
      129,  142,   87,  129,  142,   94,  129,  142,   74,  129,
      142,   73,  129,  142,  101,  129,  142,  102,  129,  142,
       96,  129,  142,  103,  129,  142,   97,  129,  142,  100,
      129,  142,   72,  129,  142,   72,  129,  142,   85,  129,
      142,   86,  129,  142,   98,  129,  142,   72,  129,  142,
       72,  129,  142,   72,  129,  142,   72,  129,  142,   72,

      129,  142,   72,  129,  142,   72,  129,  142,   72,  129,
      142,   72,  129,  142,   72,  129,  142,   72,  129,  142,
       72,  129,  142,   72,  129,  142,   72,  129,  142,   72,
      129,  142,   72,  129,  142,   72,  129,  142,   72,  129,
      142,   83,  129,  142,   99,  129,  142,   84,  129,  142,
       92,  129,  142,   82,  129,  142,  137,  142,  130,  142,
      135,  137,  142,  131,  137,  142,  135,  137,  142,  136,
      142,  133,  142,  134,  136,  142,  139,  142,  138,  142,
      141,  142,  142,  141,  142,    3,    5,    4,  115,   78,
      120,  116,  125,  118,  108,  121,  109,  122,  106,  104,

       76,    1,    2,  119,   76,   74,   74,   74,   73,   73,
       73,  105,  110,  112,  114,  113,  111,   72,  126,   72,
       72,   72,   72,   72,   72,   72,   72,   15,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   26,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  127,  117,  135,  135,  134,  140,   77,  107,
      128,   76,   76,   74,   75,   73,  123,  124,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   24,   72,   72,

       72,   72,   72,   72,   72,   30,   72,   72,   72,   72,
       55,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  135,
       76,   75,   75,    6,   72,   33,   72,   72,    8,   72,
       72,    9,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   17,   72,   18,   72,   72,   20,   72,   72,   72,
       72,   72,   25,   72,   72,   72,   72,   72,   31,   72,
       32,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   61,

       72,   72,   72,   72,   72,   72,   72,   72,   47,   72,
       72,   72,  135,   75,    7,   72,   71,   72,   50,   72,
       10,   72,   72,   72,   72,   72,   72,   72,   19,   72,
       21,   72,   72,   23,   72,   72,   27,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   37,   72,   72,   72,   72,   72,   72,   72,   70,
       72,   72,   72,   44,   72,   45,   72,   72,   69,   72,
       72,   72,   49,   72,  135,   72,   72,   72,   13,   72,
       52,   72,   16,   72,   72,   22,   72,   53,   72,   28,
       72,   72,   54,   72,   72,   72,   72,   34,   72,   72,

       72,   60,   72,   72,   72,   36,   72,   38,   72,   39,
       72,   40,   72,   41,   72,   42,   72,   72,   72,   72,
       72,   72,   72,  132,  135,   72,   72,   12,   72,   14,
       72,   72,   29,   72,   72,   72,   72,   59,   72,   72,
       72,   72,   72,   72,   43,   72,   72,   72,   62,   72,
       72,   72,   11,   72,   72,   72,   56,   72,   57,   72,
       72,   35,   72,   72,   72,   63,   72,   64,   72,   46,
       72,   48,   72,   72,   72,   51,   72,   58,   72,   72,
       72,   67,   72,   72,   72,   72,   72,   72,   66,   72,
       65,   72,   72,   72,   72,   72,   68,   72

    } ;

static yyconst short int yy_accept[452] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,    9,   12,   15,   17,   20,   23,
       25,   28,   31,   34,   37,   40,   43,   46,   49,   52,
       55,   58,   61,   64,   67,   70,   73,   76,   79,   82,
       85,   88,   91,   94,   97,  100,  103,  106,  109,  112,
      115,  118,  121,  124,  127,  130,  133,  136,  139,  142,
      145,  148,  151,  154,  157,  159,  161,  164,  167,  170,
      172,  174,  177,  179,  181,  183,  184,  186,  187,  188,
      188,  189,  190,  190,  191,  191,  192,  193,  194,  194,
      194,  195,  196,  197,  198,  199,  200,  201,  201,  202,

      203,  204,  205,  206,  207,  207,  207,  208,  209,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      219,  219,  220,  221,  222,  223,  224,  225,  226,  227,
      228,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  241,  242,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
      269,  269,  270,  270,  270,  271,  272,  272,  273,  273,
      274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
      284,  285,  286,  287,  288,  289,  290,  291,  292,  293,

      294,  295,  296,  297,  298,  300,  301,  302,  303,  304,
      305,  306,  308,  309,  310,  311,  313,  314,  315,  316,
      317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
      337,  338,  339,  340,  341,  341,  341,  341,  341,  341,
      342,  343,  344,  346,  348,  349,  351,  352,  354,  355,
      356,  357,  358,  359,  360,  361,  362,  364,  366,  367,
      369,  370,  371,  372,  373,  375,  376,  377,  378,  379,
      381,  383,  384,  385,  386,  387,  388,  389,  390,  391,
      392,  393,  394,  395,  396,  397,  398,  399,  400,  402,

      403,  404,  405,  406,  407,  408,  409,  411,  412,  413,
      414,  414,  414,  414,  414,  415,  417,  419,  421,  423,
      424,  425,  426,  427,  428,  429,  431,  433,  434,  436,
      437,  439,  440,  441,  442,  443,  444,  445,  446,  447,
      448,  449,  450,  451,  452,  454,  455,  456,  457,  458,
      459,  460,  462,  463,  464,  466,  468,  469,  471,  472,
      473,  475,  476,  477,  478,  479,  481,  483,  485,  486,
      488,  490,  492,  493,  495,  496,  497,  498,  500,  501,
      502,  504,  505,  506,  508,  510,  512,  514,  516,  518,
      519,  520,  521,  522,  523,  524,  526,  527,  528,  530,

      532,  533,  535,  536,  537,  538,  540,  541,  542,  543,
      544,  545,  547,  548,  549,  551,  552,  553,  555,  556,
      557,  559,  561,  562,  564,  565,  566,  568,  570,  572,
      574,  575,  576,  578,  580,  581,  582,  584,  585,  586,
      587,  588,  589,  591,  593,  594,  595,  596,  597,  599,
      599
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,    1,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,    1,   31,   31,   31,   31,   32,   33,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       34,   34,   34,   34,   36,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   34,   52,   53,   54,   55,
       56,   57,   34,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    1,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    6,    1,    1,    1,    1,    1,    3,
        6,    6,    6,    7,    7,    7,    7,    1,    3,    1,
        1,    7,    5,    5,    6,    6,    6,    5,    7,    7,
        7,    7,    7,    7,    8,    7,    7,    8,    7,    8,
        7,    8,    7,    8,    7,    7,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[463] =
    {   0,
        0,  796,   70,    0,  140,    0,  802,  801,  208,  209,
      803,  807,  211,  807,  224,  774,  210,  773,  208,  761,
      807,  807,  771,  204,  807,  214,  224,  229,  238,  231,
      773,  807,  195,  769,  206,  807,    0,  228,  807,  807,
      768,  734,  213,  233,  212,  240,  247,  738,  217,  231,
      209,  239,  236,  746,  256,  261,  254,  259,  742,  807,
      211,  807,  807,  807,  807,  807,    0,  807,  744,  807,
      807,    0,  807,  807,  807,  807,  769,  318,  807,  325,
      331,  807,  279,  807,  317,  807,  807,  807,  225,  319,
      807,  807,  807,  807,  807,  773,  807,  768,  321,  807,

      807,  807,  325,  362,  343,  382,  310,  317,    0,  390,
      315,  324,  807,  759,  807,  807,  807,  758,    0,  341,
      746,  807,  724,  727,  735,  221,  738,  737,  724,  264,
      717,  722,  328,  342,  718,  715,  718,  715,  721,  711,
      309,  347,  715,  714,  714,  704,  719,  718,  365,  720,
      342,  707,  362,  374,  711,  707,  338,  703,  383,  708,
      700,  367,  706,  807,  807,    0,  708,    0,  807,  418,
        0,  807,  422,    0,  807,  807,  430,  807,  436,  440,
      807,  395,  807,  807,  807,  699,  701,  710,  705,  706,
      692,  690,  302,  395,  701,  703,  703,  697,  697,  692,

      688,  685,  693,  696,    0,  691,  681,  689,  689,  681,
      682,    0,  685,  682,  683,    0,  671,  670,  678,  664,
      665,  671,  672,  667,  660,  662,  664,  671,  657,  655,
      655,  657,  654,  656,  664,  663,  653,  657,  652,  646,
      659,  661,  650,  651,  446,  485,  457,  521,  443,  467,
      436,  439,    0,    0,  649,    0,  650,    0,  640,  638,
      646,  635,  640,  634,  640,  638,    0,    0,  643,    0,
      632,  631,  628,  632,    0,  638,  638,  623,  628,    0,
        0,  623,  638,  627,  625,  635,  630,  625,  616,  614,
      615,  612,  624,  614,  618,  623,  622,  613,    0,  602,

      378,  616,  608,  613,  612,  599,    0,  599,  611,  602,
      462,    0,  437,    0,  807,    0,    0,    0,  614,  600,
      601,  606,  605,  604,  599,    0,    0,  594,    0,  602,
        0,  599,  600,  598,  587,  583,  586,  598,  580,  594,
      593,  577,  589,  580,    0,  588,  585,  587,  564,  573,
      575,    0,  570,  554,    0,    0,  540,    0,  544,  512,
        0,  515,  516,  498,  498,  511,    0,    0,  511,    0,
        0,    0,  508,    0,  508,  494,  506,    0,  501,  487,
        0,  499,  484,    0,    0,    0,  499,    0,    0,  480,
      491,  484,  490,  483,  482,    0,  484,  479,    0,    0,

      483,    0,  478,  464,  475,    0,  472,  456,  456,  467,
      464,    0,  463,  460,    0,  458,  445,    0,  458,  452,
        0,    0,  452,    0,  437,  444,    0,    0,    0,    0,
      426,  441,    0,    0,  436,  423,    0,  422,  418,  417,
      379,  394,    0,    0,  374,  352,  255,  230,    0,  807,
      569,  577,  585,  593,  597,  601,  605,  611,  617,  621,
      623,  625
    } ;

static yyconst short int yy_def[463] =
    {   0,
      450,    1,  450,    3,  450,    5,  451,  451,  452,  452,
      450,  450,  450,  450,  450,  450,  453,  450,  450,  454,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  455,  455,  450,  450,
      450,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  450,
      450,  450,  450,  450,  450,  450,  456,  450,  456,  450,
      450,  457,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  453,  450,  458,  450,  450,  450,  454,  459,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450,  450,  450,  460,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  455,  453,
      454,  450,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  450,  450,  456,  456,  457,  450,  453,
      461,  450,  454,  462,  450,  450,  450,  450,  450,  450,
      450,  460,  450,  450,  450,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  456,  453,  453,  454,  454,  450,  450,
      450,  450,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  456,
      453,  246,  454,  248,  450,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  456,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  456,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,    0,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450
    } ;

static yyconst short int yy_nxt[878] =
    {   0,
       12,   13,   14,   15,   15,   15,   13,   16,   17,   12,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   30,   31,   32,   33,   34,   35,   36,
       37,   37,   37,   37,   38,   37,   37,   39,   12,   40,
       41,   37,   42,   43,   44,   45,   46,   47,   48,   37,
       49,   37,   50,   37,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   37,   37,   37,   60,   61,   62,   63,
       65,   65,   66,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       67,   67,   67,   67,   67,   67,   67,   65,   68,   65,
       65,   67,   67,   67,   67,   69,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   65,   65,   65,   65,
       70,   70,   71,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       72,   72,   72,   72,   72,   72,   72,   70,   70,   70,
       70,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   70,   70,   70,   70,
       76,   76,   78,   79,   80,   80,   80,   78,   84,   87,
       92,  114,  115,   77,   77,   80,   79,   81,   81,   81,
       80,   93,   94,  117,  118,   88,  120,  172,  164,   97,
      121,   95,   96,   98,  100,   99,   99,   99,   85,  101,
      103,  145,  110,  110,  110,  146,  102,  103,  130,  104,
      104,  105,  106,   90,  141,  111,  112,  131,  124,  106,
      125,  142,  107,  108,  109,  126,  132,  106,  165,  189,
      190,  143,  127,  111,  106,  128,  144,   84,  129,  449,
      107,  112,  133,  149,  134,  147,  150,  135,  108,  137,

      148,  109,  138,  136,  139,  152,  153,  156,  159,  161,
      157,  194,  160,  448,  162,  154,  195,   85,  155,   78,
       79,   80,   80,   80,   78,  158,   80,   79,   80,   80,
       80,   80,   80,   79,   81,   81,   81,   80,  170,  170,
      173,  173,   99,   99,   99,  181,   99,   99,   99,   84,
      183,  181,  177,  178,  208,  178,  177,  178,  183,  178,
      260,  261,  103,  209,  105,  105,  105,  177,  178,  181,
      181,  177,  178,  178,  106,  183,  183,  178,  198,   85,
      171,  103,  174,  104,  104,  105,  199,  200,  233,  106,
      223,  210,  224,  106,  447,  234,  107,  108,  179,  211,

      179,  225,  201,  180,  180,  180,  212,  219,  106,  103,
      227,  110,  110,  110,  107,  220,  229,  241,  446,  242,
      221,  106,  108,  353,  111,  112,   84,  228,  236,  251,
      252,  230,  354,  237,  172,  445,  106,  262,  444,  245,
      245,  238,  111,  247,  247,  263,  249,  251,  249,  172,
      112,  250,  250,  250,   84,  252,   85,  180,  180,  180,
       90,  180,  180,  180,  250,  250,  250,  311,  311,  172,
       84,  315,  178,  315,  178,   90,  443,  442,  313,  313,
      441,  440,  439,  438,   85,  437,  436,  178,  250,  250,
      250,  315,  178,   84,  435,   90,  315,  434,  433,  178,

       85,  178,  432,  431,  430,  429,  312,  312,  312,  428,
      427,  426,  425,  424,  178,  312,  312,  312,  423,  178,
      422,  421,  420,   85,  419,  418,  417,  312,  312,  312,
      312,  312,  312,  172,  416,  415,  414,  413,  412,  411,
      410,  409,  314,  314,  314,  408,  407,  406,  405,  404,
      403,  314,  314,  314,  402,  401,  400,  399,  398,   90,
      397,  396,  395,  314,  314,  314,  314,  314,  314,   73,
       73,   73,   73,   73,   73,   73,   73,   75,   75,   75,
       75,   75,   75,   75,   75,   83,  394,   83,   83,   83,
       83,   83,   83,   89,  393,   89,  392,   89,   89,   89,

       89,  119,  119,  119,  119,  166,  166,  166,  166,  168,
      168,  168,  168,   83,   83,   83,  391,  390,   83,   89,
       89,   89,  389,  388,   89,  182,  182,  246,  246,  248,
      248,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,

      316,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  259,  258,
      257,  256,  255,  254,  253,  244,  243,  240,  239,  235,
      232,  231,  226,  222,  218,  217,  216,  215,  214,  213,
      207,  206,  205,  204,  203,  202,  197,  196,  193,  192,
      191,  188,  187,  186,   90,  185,  184,  176,  175,  169,
      167,  163,  151,  140,  123,  122,  116,  113,   91,   90,

       86,   82,  450,   74,   74,   64,   11,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450
    } ;

static yyconst short int yy_chk[878] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        9,   10,   13,   13,   13,   13,   13,   13,   17,   19,
       24,   33,   33,    9,   10,   15,   15,   15,   15,   15,
       15,   24,   26,   35,   35,   19,   38,   89,   61,   27,
       38,   26,   26,   27,   28,   27,   27,   27,   17,   28,
       30,   51,   30,   30,   30,   51,   28,   29,   45,   29,
       29,   29,   30,   89,   49,   30,   30,   45,   43,   29,
       43,   49,   29,   29,   29,   44,   45,   30,   61,  126,
      126,   50,   44,   30,   29,   44,   50,   83,   44,  448,
       29,   30,   46,   53,   46,   52,   53,   46,   29,   47,

       52,   29,   47,   46,   47,   55,   55,   56,   57,   58,
       56,  130,   57,  447,   58,   55,  130,   83,   55,   78,
       78,   78,   78,   78,   78,   56,   80,   80,   80,   80,
       80,   80,   81,   81,   81,   81,   81,   81,   85,   85,
       90,   90,   99,   99,   99,  107,  103,  103,  103,  120,
      111,  108,   99,   99,  141,   99,  103,  103,  112,  103,
      193,  193,  105,  141,  105,  105,  105,   99,   99,  108,
      107,  103,  103,   99,  105,  111,  112,  103,  133,  120,
       85,  104,   90,  104,  104,  104,  133,  134,  157,  105,
      151,  142,  151,  104,  446,  157,  104,  104,  106,  142,

      106,  151,  134,  106,  106,  106,  142,  149,  104,  110,
      153,  110,  110,  110,  104,  149,  154,  162,  445,  162,
      149,  110,  104,  301,  110,  110,  170,  153,  159,  182,
      182,  154,  301,  159,  173,  442,  110,  194,  441,  170,
      170,  159,  110,  173,  173,  194,  177,  182,  177,  313,
      110,  177,  177,  177,  245,  182,  170,  179,  179,  179,
      173,  180,  180,  180,  249,  249,  249,  245,  245,  247,
      311,  251,  180,  252,  180,  313,  440,  439,  247,  247,
      438,  436,  435,  432,  245,  431,  426,  180,  250,  250,
      250,  252,  180,  246,  425,  247,  251,  423,  420,  250,

      311,  250,  419,  417,  416,  414,  246,  246,  246,  413,
      411,  410,  409,  408,  250,  246,  246,  246,  407,  250,
      405,  404,  403,  246,  401,  398,  397,  246,  246,  246,
      246,  246,  246,  248,  395,  394,  393,  392,  391,  390,
      387,  383,  248,  248,  248,  382,  380,  379,  377,  376,
      375,  248,  248,  248,  373,  369,  366,  365,  364,  248,
      363,  362,  360,  248,  248,  248,  248,  248,  248,  451,
      451,  451,  451,  451,  451,  451,  451,  452,  452,  452,
      452,  452,  452,  452,  452,  453,  359,  453,  453,  453,
      453,  453,  453,  454,  357,  454,  354,  454,  454,  454,

      454,  455,  455,  455,  455,  456,  456,  456,  456,  457,
      457,  457,  457,  458,  458,  458,  353,  351,  458,  459,
      459,  459,  350,  349,  459,  460,  460,  461,  461,  462,
      462,  348,  347,  346,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  330,  328,  325,
      324,  323,  322,  321,  320,  319,  310,  309,  308,  306,
      305,  304,  303,  302,  300,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  282,  279,  278,  277,  276,  274,  273,  272,  271,
      269,  266,  265,  264,  263,  262,  261,  260,  259,  257,

      255,  244,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  215,
      214,  213,  211,  210,  209,  208,  207,  206,  204,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  192,  191,
      190,  189,  188,  187,  186,  167,  163,  161,  160,  158,
      156,  155,  152,  150,  148,  147,  146,  145,  144,  143,
      140,  139,  138,  137,  136,  135,  132,  131,  129,  128,
      127,  125,  124,  123,  121,  118,  114,   98,   96,   77,
       69,   59,   54,   48,   42,   41,   34,   31,   23,   20,

       18,   16,   11,    8,    7,    2,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/* Included code before lex code */
/*************** Includes and Defines *****************************/


#include "map"
#include "cpp_lexer.h"		// YACC generated definitions based on C++ grammar
#include "errno.h"

#define YYSTYPE std::string
#define ECHO

#include "string"
#include <stdlib.h>
#include <string.h>
#include <vector>

extern std::string cl_expr_lval;
extern std::string cl_var_lval;

bool setExprLexerInput(const std::string &in);
void cl_expr_lex_clean();

bool exprIsaTYPE(char *string);
bool exprIsaMACRO(char *string);
static bool defineFound = false;

/* Prototypes */
#define WHITE_RETURN(x) /* do nothing */

#define PA_KEYWORD_RETURN(x)   RETURN_VAL(x)  /* standard C PArser Keyword */
#define CPP_KEYWORD_RETURN(x)  PA_KEYWORD_RETURN(x)  /* C++ keyword */
#define PPPA_KEYWORD_RETURN(x) RETURN_VAL(x)  /* both PreProcessor and PArser keyword */
#define PP_KEYWORD_RETURN(x)   IDENTIFIER_RETURN()

#define IDENTIFIER_RETURN(){\
										if(exprIsaTYPE(yytext)){\
											RETURN_VAL(LE_TYPEDEFname);\
										}else if(exprIsaMACRO(yytext)){\
											RETURN_VAL(LE_MACRO);\
										}else{ RETURN_VAL(LE_IDENTIFIER);}\
									}


#define PPOP_RETURN(x)       RETURN_VAL((int)*yytext) /* PreProcess and Parser operator */
#define NAMED_PPOP_RETURN(x) RETURN_VAL(x)
#define ASCIIOP_RETURN(x)    RETURN_VAL((int)*yytext) /* a single character operator */
#define NAMEDOP_RETURN(x)    RETURN_VAL(x)            /* a multichar operator, with a name */

#define NUMERICAL_RETURN(x) RETURN_VAL(x)            /* some sort of constant */
#define LITERAL_RETURN(x)   RETURN_VAL(x)            /* a string literal */
#define C_COMMENT_RETURN(x) RETURN_VAL(x)	     /* C Style comment  */
#define RETURN_VAL(x) {\
								cl_expr_lval = yytext;\
								return(x);}
#define PREPR 1

#define WRAP_PREP 2

#define CPP_COMMENT 3

#define C_COMMENT 4


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 451 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 807 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
			BEGIN C_COMMENT;
     }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
			BEGIN CPP_COMMENT;
     }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
			WHITE_RETURN(' ');
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
			WHITE_RETURN(' ');
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
			WHITE_RETURN('\n');
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_AUTO);}
	YY_BREAK
case 7:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_BREAK);}
	YY_BREAK
case 8:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CASE);}
	YY_BREAK
case 9:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CHAR);}
	YY_BREAK
case 10:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CONST);}
	YY_BREAK
case 11:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_CONTINUE);}
	YY_BREAK
case 12:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_DEFAULT);}
	YY_BREAK
case 13:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_DEFINE);}
	YY_BREAK
case 14:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_OPDEFINED);}
	YY_BREAK
case 15:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_DO);}
	YY_BREAK
case 16:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_DOUBLE);}
	YY_BREAK
case 17:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_ELIF);}
	YY_BREAK
case 18:
YY_RULE_SETUP
{PPPA_KEYWORD_RETURN(LE_ELSE);}
	YY_BREAK
case 19:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_ENDIF);}
	YY_BREAK
case 20:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_ENUM);}
	YY_BREAK
case 21:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_ERROR);}
	YY_BREAK
case 22:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_EXTERN);}
	YY_BREAK
case 23:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_FLOAT);}
	YY_BREAK
case 24:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_FOR);}
	YY_BREAK
case 25:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_GOTO);}
	YY_BREAK
case 26:
YY_RULE_SETUP
{PPPA_KEYWORD_RETURN(LE_IF);}
	YY_BREAK
case 27:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_IFDEF);}
	YY_BREAK
case 28:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_IFNDEF);}
	YY_BREAK
case 29:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_INCLUDE); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_INT);}
	YY_BREAK
case 31:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_LINE);}
	YY_BREAK
case 32:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_LONG);}
	YY_BREAK
case 33:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_BOOL);}
	YY_BREAK
case 34:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_PRAGMA);}
	YY_BREAK
case 35:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_REGISTER);}
	YY_BREAK
case 36:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_RETURN);}
	YY_BREAK
case 37:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SHORT);}
	YY_BREAK
case 38:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SIGNED);}
	YY_BREAK
case 39:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SIZEOF);}
	YY_BREAK
case 40:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_STATIC);}
	YY_BREAK
case 41:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_STRUCT);}
	YY_BREAK
case 42:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_SWITCH);}
	YY_BREAK
case 43:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_TYPEDEF);}
	YY_BREAK
case 44:
YY_RULE_SETUP
{PP_KEYWORD_RETURN(LE_UNDEF);}
	YY_BREAK
case 45:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_UNION);}
	YY_BREAK
case 46:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_UNSIGNED);}
	YY_BREAK
case 47:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_VOID);}
	YY_BREAK
case 48:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_VOLATILE);}
	YY_BREAK
case 49:
YY_RULE_SETUP
{PA_KEYWORD_RETURN(LE_WHILE);}
	YY_BREAK
case 50:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_CLASS);}
	YY_BREAK
case 51:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_NAMESPACE);}
	YY_BREAK
case 52:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_DELETE);}
	YY_BREAK
case 53:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_FRIEND);}
	YY_BREAK
case 54:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_INLINE);}
	YY_BREAK
case 55:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_NEW);}
	YY_BREAK
case 56:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_OPERATOR);}
	YY_BREAK
case 57:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_OVERLOAD);}
	YY_BREAK
case 58:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_PROTECTED);}
	YY_BREAK
case 59:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_PRIVATE);}
	YY_BREAK
case 60:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_PUBLIC);}
	YY_BREAK
case 61:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_THIS);}
	YY_BREAK
case 62:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_VIRTUAL);}
	YY_BREAK
case 63:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_TEMPLATE);}
	YY_BREAK
case 64:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_TYPENAME);}
	YY_BREAK
case 65:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_DYNAMIC_CAST);}
	YY_BREAK
case 66:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_STATIC_CAST);}
	YY_BREAK
case 67:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_CONST_CAST);}
	YY_BREAK
case 68:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_REINTERPRET_CAST);}
	YY_BREAK
case 69:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_USING);}
	YY_BREAK
case 70:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_THROW);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{CPP_KEYWORD_RETURN(LE_CATCH);}
	YY_BREAK
case 72:
YY_RULE_SETUP
{IDENTIFIER_RETURN();}
	YY_BREAK
case 73:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_INTEGERconstant);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_OCTALconstant);}
	YY_BREAK
case 75:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_HEXconstant);}
	YY_BREAK
case 76:
YY_RULE_SETUP
{NUMERICAL_RETURN(LE_FLOATINGconstant);}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
			NUMERICAL_RETURN(LE_CHARACTERconstant);
			}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
			LITERAL_RETURN(LE_STRINGliteral);}
	YY_BREAK
case 79:
YY_RULE_SETUP
{PPOP_RETURN(LE_LP);}
	YY_BREAK
case 80:
YY_RULE_SETUP
{PPOP_RETURN(LE_RP);}
	YY_BREAK
case 81:
YY_RULE_SETUP
{PPOP_RETURN(LE_COMMA);}
	YY_BREAK
case 82:
YY_RULE_SETUP
{BEGIN PREPR;}
	YY_BREAK
case 83:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_LC);}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_RC);}
	YY_BREAK
case 85:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_LB);}
	YY_BREAK
case 86:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_RB);}
	YY_BREAK
case 87:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_DOT);}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_AND);}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_STAR);}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_PLUS);}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_MINUS);}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_NEGATE);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_NOT);}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_DIV);}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_MOD);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_LT);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_GT);}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_XOR);}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_PIPE);}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_QUESTION);}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_COLON);}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_SEMICOLON);}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ASCIIOP_RETURN(LE_ASSIGN);}
	YY_BREAK
case 104:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_DOTstar);}
	YY_BREAK
case 105:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_CLCL);}
	YY_BREAK
case 106:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ARROW);}
	YY_BREAK
case 107:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ARROWstar);}
	YY_BREAK
case 108:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ICR);}
	YY_BREAK
case 109:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_DECR);}
	YY_BREAK
case 110:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_LS);}
	YY_BREAK
case 111:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_RS);}
	YY_BREAK
case 112:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_LE);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_GE);}
	YY_BREAK
case 114:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_EQ);}
	YY_BREAK
case 115:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_NE);}
	YY_BREAK
case 116:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ANDAND);}
	YY_BREAK
case 117:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_OROR);}
	YY_BREAK
case 118:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_MULTassign);}
	YY_BREAK
case 119:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_DIVassign);}
	YY_BREAK
case 120:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_MODassign);}
	YY_BREAK
case 121:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_PLUSassign);}
	YY_BREAK
case 122:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_MINUSassign);}
	YY_BREAK
case 123:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_LSassign);}
	YY_BREAK
case 124:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_RSassign);}
	YY_BREAK
case 125:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ANDassign);}
	YY_BREAK
case 126:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ERassign);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ORassign);}
	YY_BREAK
case 128:
YY_RULE_SETUP
{NAMEDOP_RETURN(LE_ELLIPSIS);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PREPR):
case YY_STATE_EOF(WRAP_PREP):
case YY_STATE_EOF(CPP_COMMENT):
case YY_STATE_EOF(C_COMMENT):
{
							//reset lexer
							yyterminate();
						}
	YY_BREAK
case 129:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 130:
YY_RULE_SETUP
{
						defineFound = false;
						BEGIN INITIAL;
					}
	YY_BREAK
case 131:
YY_RULE_SETUP
{
						BEGIN WRAP_PREP;
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
{
						defineFound = true;
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
{
						BEGIN PREPR;
					}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
						if(defineFound)
						{
							defineFound = false;
						}
					}
	YY_BREAK
case 135:
YY_RULE_SETUP
{
						if(defineFound)
						{
							defineFound = false;
						}
					}
	YY_BREAK
case 136:
YY_RULE_SETUP
{}
	YY_BREAK
case 137:
YY_RULE_SETUP
{}
	YY_BREAK
case 138:
YY_RULE_SETUP
{BEGIN INITIAL;}
	YY_BREAK
case 139:
YY_RULE_SETUP
{}
	YY_BREAK
case 140:
YY_RULE_SETUP
{BEGIN INITIAL;}
	YY_BREAK
case 141:
YY_RULE_SETUP
{}
	YY_BREAK
case 142:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 451 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 451 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 450);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


bool exprIsaTYPE(char *string)
{
	return false;
}

bool exprIsaMACRO(char *string)
{
	return false;
}

void cl_expr_lex_clean()
{
	yy_flush_buffer(YY_CURRENT_BUFFER);
	yy_delete_buffer(YY_CURRENT_BUFFER);
	cl_expr_lineno = 1;
}

/*******************************************************************/
bool setExprLexerInput(const std::string &in)
{
	BEGIN INITIAL;
	yy_scan_string(in.c_str());

	//update the working file name
	return true;
}

int yywrap()
{
	return 1;
}
